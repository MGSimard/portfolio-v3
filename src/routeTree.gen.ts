/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WebdevImport } from './routes/webdev'
import { Route as IndexImport } from './routes/index'
import { Route as GamedevIndexImport } from './routes/gamedev/index'
import { Route as GamedevTerminalImport } from './routes/gamedev/terminal'

// Create/Update Routes

const WebdevRoute = WebdevImport.update({
  id: '/webdev',
  path: '/webdev',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GamedevIndexRoute = GamedevIndexImport.update({
  id: '/gamedev/',
  path: '/gamedev/',
  getParentRoute: () => rootRoute,
} as any)

const GamedevTerminalRoute = GamedevTerminalImport.update({
  id: '/gamedev/terminal',
  path: '/gamedev/terminal',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/webdev': {
      id: '/webdev'
      path: '/webdev'
      fullPath: '/webdev'
      preLoaderRoute: typeof WebdevImport
      parentRoute: typeof rootRoute
    }
    '/gamedev/terminal': {
      id: '/gamedev/terminal'
      path: '/gamedev/terminal'
      fullPath: '/gamedev/terminal'
      preLoaderRoute: typeof GamedevTerminalImport
      parentRoute: typeof rootRoute
    }
    '/gamedev/': {
      id: '/gamedev/'
      path: '/gamedev'
      fullPath: '/gamedev'
      preLoaderRoute: typeof GamedevIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/webdev': typeof WebdevRoute
  '/gamedev/terminal': typeof GamedevTerminalRoute
  '/gamedev': typeof GamedevIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/webdev': typeof WebdevRoute
  '/gamedev/terminal': typeof GamedevTerminalRoute
  '/gamedev': typeof GamedevIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/webdev': typeof WebdevRoute
  '/gamedev/terminal': typeof GamedevTerminalRoute
  '/gamedev/': typeof GamedevIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/webdev' | '/gamedev/terminal' | '/gamedev'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/webdev' | '/gamedev/terminal' | '/gamedev'
  id: '__root__' | '/' | '/webdev' | '/gamedev/terminal' | '/gamedev/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WebdevRoute: typeof WebdevRoute
  GamedevTerminalRoute: typeof GamedevTerminalRoute
  GamedevIndexRoute: typeof GamedevIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WebdevRoute: WebdevRoute,
  GamedevTerminalRoute: GamedevTerminalRoute,
  GamedevIndexRoute: GamedevIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/webdev",
        "/gamedev/terminal",
        "/gamedev/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/webdev": {
      "filePath": "webdev.tsx"
    },
    "/gamedev/terminal": {
      "filePath": "gamedev/terminal.tsx"
    },
    "/gamedev/": {
      "filePath": "gamedev/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
